o que é solid?
-> acrônimo que cita 5 princípios fundamentais para o desenvolvimento de um software de arquitetura robusta e de fácil manutenção

PRINCÍPIOS:
SRB (SINGLE RESPONSIBILITY PRINCIPLE)
-> PRINCÍPIO DA RESPONSABILIDADE ÚNICA DIZ QUE SUAS CLASSES DEVEM SER ESPECIALISTA EM UMA ÚNICA TAREFA AO INVÉS DE REALIZER N TAREFAS

OCP (OPEN/CLOSED PRINCIPLE)
-> PRINCÍPIO DO ABERTO E FECHADO DIZ QUE AS PARTES QUE COMPÕE O NOSSO SOFTWARE DEVEM SER FECHADOS PARA MODIFICAÇÕES MAS ABERTOS PARA EXTENSÕES

LSP (LIKOV SUBSTITUTION PRINCIPLE)
-> PRINCÍPIO DA SUBSTITUIÇÃO DE LISKOV DIZ QUE OBJETOS DE UM TIPO BASE DEVEM SER SUBSTITUIVEIS POR INSTANCIAS DE UM SUBTIPO

ISP (INTERFACE SEGREGATION PRINCIPLE)
-> PRINCÍPIO DA SEGREGAÇÃO DE INTERFACES DIZ QUE INTERFACES COM MUITAS FUNCIONALIDADES NÃO COESAS DEVEM SER DIVIDIDAS EM INTERFACES MENORES

DIP (DEPENDENCY INVERSION PRINCIPLE)
-> PRINCÍPIO DA INVERSÃO DE DEPENDENCIA DIZ QUE MÓDULOS DO SISTEMA DEVE DEPENDER DE INTERFACES E NÃO DE IMPLEMENTAÇÕES ESPECÍFICAS



VANTAGENS:
-> MANUTENÇÃO SIMPLIFICADA
-> REUTILIZAÇÃO DE CÓDIGO
-> LEGIBILIDADE APRIMORADA
-> REDUÇÃO DE ERROS
-> BAIXO ACOPLAMENTO
